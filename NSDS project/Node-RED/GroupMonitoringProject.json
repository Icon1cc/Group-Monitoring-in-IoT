[
    {
        "id": "86fc0ac4f4fb9362",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2f4b92cc09cd0c77",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.neslab.it:3200 ",
        "port": "3200",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0af0c6624d10ec70",
        "type": "function",
        "z": "86fc0ac4f4fb9362",
        "name": "Statistical computation",
        "func": "// Helper function to update group statistics\nfunction updateGroupStatistics(group, newCardinality) {\n    group.cardinality = newCardinality;\n    group.lifetime = (Date.now() - group.timestamp) / 1000;\n\n    // Update max, min, and average cardinalities\n    group.maximum = Math.max(group.maximum, newCardinality);\n    group.minimum = Math.min(group.minimum || Infinity, newCardinality);\n    group.average = ((group.average * group.index) + newCardinality) / (group.index + 1);\n    group.index += 1;\n}\n\n\n// Function to handle the periodic monitoring of groups and timeouts\nfunction periodicGroupMonitoring() {\n    const groups = context.get('groups') || {};\n    const now = Date.now();\n    const timeoutThreshold = 60000; // Timeout threshold in milliseconds (e.g., 1 minute)\n\n    Object.keys(groups).forEach(groupKey => {\n        const group = groups[groupKey];\n        \n        // Filter out members who have timed out\n        group.members = group.members.filter(member => \n            now - (member.lastActive || group.timestamp) < timeoutThreshold\n        );\n\n        // Update statistics if group cardinality has changed\n        const newCardinality = group.members.length;\n        if (newCardinality !== group.cardinality) {\n            updateGroupStatistics(group, newCardinality);\n        }\n        \n        // Check if group should be dismantled due to low cardinality\n        if (group.cardinality < 3) {\n            dismantleGroup(groupKey, groups);\n        } else {\n            // Update group's lifetime\n            group.lifetime = (now - group.timestamp) / 1000;\n        }\n    });\n\n    context.set('groups', groups);\n}\n\n// Function to dismantle a group\nfunction dismantleGroup(groupKey, groups) {\n    // Log a warning or perform other needed dismantling logic\n    node.warn(`Group ${groupKey} has been dismantled due to insufficient members.`);\n    groups[groupKey] = {\n        members: [],\n        cardinality: 0,\n        maximum: 0,\n        minimum: 0,\n        average: 0,\n        index: 0,\n        timestamp: Date.now(),\n        lifetime: 0,\n        dismantle_timer: Date.now()\n    };\n}\n\n// Function to update a group when a message is received\nfunction processGroupMemberships(cooja_result) {\n    const groups = context.get('groups') || {};\n    const now = Date.now();\n    \n    // Find or create groups for the sender\n    let existingGroups = checkSenderInGroups(cooja_result);\n    \n    existingGroups.forEach(group => {\n        // Update last active time for each member\n        group.members.forEach(member => {\n            if (member.id === cooja_result.sender) {\n                member.lastActive = now;\n            }\n        });\n\n        // Check if current members match the new member list\n        if (!arraysEqual(group.members.map(m => m.id).sort(), cooja_result.members.sort())) {\n            // Members have changed, update the group\n            group.members = cooja_result.members.map(id => ({ id, lastActive: now }));\n            updateGroupStatistics(group, group.members.length);\n        }\n        // Otherwise, the group remains unchanged so no need to update statistics\n    });\n    \n    context.set('groups', groups);\n}\n\n// Function to check if the sender is in any group and return those groups\nfunction checkSenderInGroups(cooja_result) {\n    const groups = context.get('groups');\n    let memberGroups = [];\n\n    // Check all groups to see if sender is a member\n    Object.keys(groups).forEach(groupKey => {\n        if (groups[groupKey].members.includes(cooja_result.sender)) {\n            memberGroups.push(groups[groupKey]);\n        }\n    });\n\n    if (memberGroups.length === 0) {\n        addNewGroup(cooja_result, groups);\n    }\n\n    return memberGroups;\n}\n\n// Function to add a new group for the sender\nfunction addNewGroup(cooja_result, groups) {\n    for (let k = 1; k <= Object.keys(groups).length; k++) {\n        let groupKey = \"group\" + k;\n        if (groups[groupKey].members.length === 0) {\n            groups[groupKey].members = [...cooja_result.members, cooja_result.sender];\n            const newCardinality = groups[groupKey].members.length;\n\n            // Initialize group statistics\n            updateGroupStatistics(groups[groupKey], newCardinality);\n            groups[groupKey].timestamp = Date.now(); // Set the creation time of the group\n\n            context.set(\"groups\", groups);\n            return groups[groupKey];\n        }\n    }\n    return null; // In case all groups are full\n}\n\n// Function to process each member's group status\nfunction processGroupMemberships(cooja_result) {\n    const groups = context.get(\"groups\");\n    let existingGroups = checkSenderInGroups(cooja_result);\n\n    existingGroups.forEach(group => {\n        // Check if current members match the new member list\n        if (arraysEqual(group.members.sort(), cooja_result.members.sort())) {\n            // Members have not changed, update group statistics\n            updateGroupStatistics(group, group.members.length);\n        } else {\n            // Members have changed, process the update\n            group.members = cooja_result.members;\n            const newCardinality = group.members.length;\n\n            // Update statistics with new cardinality\n            updateGroupStatistics(group, newCardinality);\n        }\n    });\n\n    context.set(\"groups\", groups);\n}\n\n// Function to compare two arrays for equality\nfunction arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) return false;\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) return false;\n    }\n    return true;\n}\n\n\n// Function to handle group survivability\nfunction survivability() {\n    const groups = context.get(\"groups\");\n    let dismantledGroups = [];\n\n    Object.keys(groups).forEach(groupKey => {\n        if (groups[groupKey].cardinality < 3) {\n            // Group is too small, dismantle it\n            dismantledGroups.push(groupKey);\n            groups[groupKey] = {\n                members: [],\n                cardinality: 0,\n                maximum: 0,\n                minimum: 0,\n                average: 0,\n                index: 0,\n                timestamp: Date.now(),\n                lifetime: 0,\n                dismantle_timer: Date.now()\n            };\n        }\n    });\n\n    context.set(\"groups\", groups);\n    return dismantledGroups;\n}\n\n// Main execution flow\nconst cooja_result = msg.payload;\nprocessGroupMemberships(cooja_result);\nconst dismantledGroups = survivability();\n\n// Display messages for dismantled groups\nif(dismantledGroups.length > 0) {\n    dismantledGroups.forEach(groupKey => {\n        node.warn(`Group ${groupKey} has been dismantled due to insufficient members.`);\n    });\n}\n\n// Return the updated group information\nmsg.payload = context.get(\"groups\");\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "let groups = context.get('groups') || {};\nlet dismantle_group = context.get('dismantle_groups') || {};\n\n// Define the number of groups.\nconst numMotes = 8\nconst numGroups = Math.floor(numMotes / 3);\n\n// Create groups.\nfor (let k = 1; k <= numGroups; k++) {\n    let groupName = \"group \" + k;\n\n    groups[\"group\" + k] = {\n        name: groupName,\n        members: [],\n        cardinality: 0,\n        maximum: 0,\n        minimum: 0,\n        average: 0,\n        index: 0,\n        timestamp: 0,\n        lifetime: 0,\n        dismantle_timer: 0\n    };\n}\n\ncontext.set('groups', groups);\ncontext.set('dismantle_group', dismantle_group);",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 280,
        "wires": [
            [
                "376999c17d0c1405"
            ]
        ]
    },
    {
        "id": "376999c17d0c1405",
        "type": "debug",
        "z": "86fc0ac4f4fb9362",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 120,
        "wires": []
    },
    {
        "id": "2f6e073252bc5bc7",
        "type": "mqtt in",
        "z": "86fc0ac4f4fb9362",
        "name": "",
        "topic": "nsds_gm/contacts/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "2f4b92cc09cd0c77",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 120,
        "wires": [
            [
                "9120335de078fc1f"
            ]
        ]
    },
    {
        "id": "9120335de078fc1f",
        "type": "function",
        "z": "86fc0ac4f4fb9362",
        "name": "Cooja input",
        "func": "function extractMembersSender() {\n    let topicParts = msg.topic.split('/');\n    let sender = topicParts[2];\n\n    // Ensure 'members' property exists in msg.payload\n    if (!msg.payload || !msg.payload.hasOwnProperty('members')) {\n        msg.payload = {\n            sender: sender,\n            members: [sender]\n        };\n    } else {\n        // If 'members' property exists, add sender to the array\n        msg.payload.members.push(sender);\n    }\n\n    return msg.payload;\n}\n\n// Clean the input\nmsg.payload = extractMembersSender();\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 380,
        "wires": [
            [
                "0af0c6624d10ec70"
            ]
        ]
    }
]